security:
  enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    App\Entity\User:
      algorithm: auto

  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email

  role_hierarchy:
    ROLE_ADMIN: ROLE_MANAGER
    ROLE_MANAGER: ROLE_USER

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: app_user_provider
      custom_authenticator: App\Security\LoginFormAuthenticator
      logout:
        path: app_logout
        target: homepage


  access_control:
    - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: ^/deals/new$, roles: ROLE_USER } # L'utilisateur doit être connecté afin de pouvoir publier un deal

  # Si jamais on tente d'acceder au backOffice mais que dans la BDD, c'est un ROLE_USER, on redirige l' internaute vers la homepage
  access_denied_url: /


when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
